DomGats Filtered Loop Widget: Detailed Development Plan

This plan outlines the sequence of tasks for building out the "DomGats Filtered Loop" Elementor widget, integrating all previously discussed features, refinements, and architectural adjustments.

Main Rules:

    Always version the code.

    Always send the complete files.

    Don't replace functions with fake ones or comments.

    If you have to place a comment instead of a function, keep sending at the end of your every next message the numbered list of all functions that you done that to until they are implemented. send them in format: "1. //comment -> function() -> file it needs to be made in"

    When asked to repeat the rules back to me, repeat all of them and make sure to implement them and not forget them.

    Whenever asked to repeat the rules back to me, also read the whole DomGats Filtered Loop Widget Development Plan and all the files listed in it.

Phase 1: Foundation & Cleanup

    Consolidate & Remove Legacy Files:

        Remove main.js and main.css: These files are identified as legacy. Their functionalities (AJAX handling, Flickity initialization, general filter UI styling) will be absorbed into filtered-loop-widget.js and filtered-loop-widget.css respectively.

        Remove DGCPF_Shortcodes.php and filter-ui.php: These files represent the old shortcode-based filter system. Their functionality will be fully replaced by the Elementor widget.

    Refine Plugin Asset Enqueueing:

        Update domgats-customizable-product-filters.php: Remove the global enqueueing of flickity-css and flickity-js. The widget's get_script_depends() and get_style_depends() methods in class-filtered-loop-widget.php will be solely responsible for loading these assets when the widget is in use.

    Adjust Composer Autoloader Notice:

        Update domgats-customizable-product-filters.php: Ensure the admin notice for missing Composer autoloader (vendor/autoload.php) is robust. The plugin should stop loading only critical components if the autoloader is absent, but ideally, provide clear instructions and allow non-Composer-dependent parts to function (though for now, the current strict return; on missing autoloader is acceptable, but note for future refinement).

Phase 2: Elementor Widget - Controls (PHP)

(All changes in class-filtered-loop-widget.php unless specified)

    Layout Tab Enhancements:

        1.1 Responsive Layout Presets:

            Update _get_layout_presets(): Add two new mobile-appropriate presets:

                "Single Slide Carousel" (e.g., columns_carousel_mobile = 1, carousel_wrap_around = no).

                "Single Column Grid" (e.g., columns_mobile = 1, enable_load_more = yes).

            Ensure existing presets also define responsive column settings (columns_tablet, columns_mobile, columns_carousel_tablet, columns_carousel_mobile).

            Implement layout_preset application: Add JavaScript in filtered-loop-widget.js to apply selected preset settings to the Elementor controls when a preset is chosen.

        1.2 Initial Items Loaded:

            Add a new posts_per_page_initial control to specify the number of items loaded on the first page, distinct from posts_per_page used for "Load More".

        1.3 Responsive Equal Heights Columns:

            Add a responsive control for equal_height_columns (similar to Elementor Pro's Base_Carousel_Trait equal_height_custom_settings) that applies different settings per breakpoint.

        1.4 Separate Horizontal and Vertical Gap:

            Modify the existing gap control. Instead of a single slider, create two responsive slider controls: horizontal_gap and vertical_gap.

            Update selectors to apply column-gap and row-gap for grid, and appropriate padding/margin for carousel.

        1.5 Fix Columns Control:

            Ensure the columns control correctly applies to the grid layout via CSS selectors.

            Ensure columns_carousel is correctly passed to Flickity initialization in filtered-loop-widget.js for responsive behavior (groupCells option).

    Query Tab Overhaul:

        2.1 Advanced Select2 Controls:

            Update posts_include_by_ids, posts_exclude_by_ids, terms_include, terms_exclude: Change their type to ElementorPro\Modules\QueryControl\Controls\Query (or similar Elementor-native select2 control for IDs/Terms if available) to provide a more robust and user-friendly search and selection interface. This will involve fetching suggestions via AJAX in the editor.

            Add Taxonomy Select2 Fields: Include separate select2 controls for specific product_categories and product_tags allowing multiple selections.

            Implementation Note: For initial implementation, we will leverage Elementor Pro's existing REST API endpoints for querying posts/terms, as this is likely faster to integrate. Future optimization phases can explore custom AJAX endpoints if performance gains are significant.

        2.2 ACF Field Integration for Query:

            Enhance the query section to allow adding ACF meta queries directly. This might require a repeater within the Query tab for multiple ACF conditions, or dedicated controls for common meta query types (e.g., text, number range, true/false).

            The existing _get_all_acf_field_keys() will be crucial here.

            Implementation Note: For ACF field keys, we will primarily use the field's name (e.g., my_custom_field) as it's more commonly used and human-readable. The code will be robust enough to handle both the field name and its unique key (field_xxxxxxxxxxxxx) if needed.

        2.3 Mimic Loop Grid Query Tab: Restructure this section to closely resemble Elementor Pro's Loop Grid Query tab for familiar user experience, while providing the enhanced options mentioned.

    Filters Tab Implementation:

        3.1 Frontend Filter Rendering:

            Ensure the render() method in class-filtered-loop-widget.php correctly outputs the HTML for the filters_repeater items, handling dropdown, checkbox, radio, text, and number display types for both taxonomies and ACF fields.

            Make sure the data-taxonomy and data-acf-field-key attributes are correctly set on the filter group elements for JavaScript.

        3.2 Dynamic Filter Count:

            In DGCPF_Ajax.php, ensure the get_available_filter_options_for_query method accurately counts matching products for each potential filter option (term or ACF value) given the current active filters.

            In filtered-loop-widget.js, update updateFilterOptionsState to display these counts next to each filter option.

        3.3 Disabling Zero-Result Filters:

            In filtered-loop-widget.js, extend updateFilterOptionsState to disable (e.g., add a disabled class and set prop('disabled', true)) filter options that result in zero products, unless they are currently selected.

        3.4 Filter Dependencies:

            In DGCPF_Ajax.php, refine get_available_filter_options_for_query to account for dependencies. When calculating counts for one filter, the $current_query_args should effectively include the selections from other active filters. This is already partially handled by using $current_query_args but needs verification.

            In filtered-loop-widget.js, updateFilterOptionsState will inherently handle this as it updates based on available_filter_options returned from the AJAX, which reflects the dependent logic.

        3.5 AJAX Loading Micro-interactions:

            In filtered-loop-widget.css, add subtle visual feedback (e.g., opacity change, small spinner icon) to individual filter buttons/inputs when an AJAX request is active.

            In filtered-loop-widget.js, trigger these micro-interactions (add/remove classes) during fetchProducts and complete callbacks.

        3.6 ACF Field Display:

            Ensure the PHP render() method properly retrieves acf_get_field_object by field name or key and uses its choices/options to populate the filter UI for dropdowns, checkboxes, and radio buttons.

            Confirm text and number inputs are correctly rendered for ACF text/number fields.

    Pagination & Carousel Enhancements:

        4.1 History API Integration:

            The updateUrl and onPopState functions in filtered-loop-widget.js are already implemented. Verify their functionality, particularly with combined taxonomy and ACF filters. The widget should automatically apply filters if History API is active and parameters are present in the URL.

        4.2 Carousel Custom Arrows & Navigation:

            PHP (class-filtered-loop-widget.php):

                Add controls for "Prev Arrow Icon" and "Next Arrow Icon" (using Controls_Manager::ICONS for Elementor's icon library) under a new Carousel Navigation Style section.

                Add a responsive slides_to_move control (Controls_Manager::NUMBER) for the number of slides moved per arrow click.

            JS (filtered-loop-widget.js):

                Update initializeCarousel to use these custom icons for Flickity's prevNextButtons and to pass the slides_to_move setting to Flickity (this might require custom handling or a Flickity extension if not directly supported by groupCells).

        4.3 Carousel Thumbnails for Navigation (Lower Priority):

            Add a new control to enable/disable carousel_thumbnails_navigation.

            If enabled, implement a separate, smaller Flickity carousel below the main one for thumbnail navigation.

            Add controls for the number of visible thumbnails and the behavior of clicking a thumbnail (e.g., navigating the main carousel to that specific slide).

        4.4 Customizable "Load More" Text:

            Add controls for customizing the "Load More" button text and an optional text when no more items are available (e.g., "No More Products").

Phase 3: AJAX & JavaScript Integration

(Revisiting and refining DGCPF_Ajax.php and filtered-loop-widget.js based on new controls)

    Refactor DGCPF_Ajax.php:

        Comprehensive Query Construction: Ensure the filter_products_handler correctly processes all new query parameters (e.g., posts_include_by_ids, terms_include, ACF meta queries) and combines them with the dynamic filter selections (selected_terms_by_taxonomy, selected_acf_fields) using the specified filter_logic (AND/OR).

        ACF Meta Query Logic: Precisely implement meta_query arguments for different ACF field types (text, number, select, checkbox, radio, true/false) based on the display_as and the ACF field's actual type. Pay close attention to how ACF stores values (e.g., serialized arrays for checkboxes) to ensure correct compare and value parameters.

        Dynamic Filter Counts (get_available_filter_options_for_query): Verify this function's logic is robust and accurately calculates counts for all filter options (including ACF) by re-running queries with specific conditions, taking into account all other active filters.

    Update filtered-loop-widget.js:

        Synchronize with PHP Controls: Ensure all new Elementor controls (e.g., posts_per_page_initial, responsive gap, new carousel options, new query controls) are correctly read from self.settings and passed to the AJAX call.

        Enhanced onFilterChange: Make sure it correctly captures values from new select2 fields and refined ACF inputs.

        Flickity Initialization with new settings: Update initializeCarousel to consume all new carousel settings (custom arrows, thumbnails, slides per click) and pass them to Flickity.

        Update UI based on available_filter_options: updateFilterOptionsState needs to handle the updated structure of available_filter_options from DGCPF_Ajax.php to correctly display counts and disable irrelevant options for both taxonomies and ACF fields.

Phase 4: Styling & Polish (CSS)

(All changes primarily in filtered-loop-widget.css)

    Implement Elementor CSS Variables:

        Update filtered-loop-widget.css: Replace hardcoded values for colors, typography, borders, and spacing with Elementor CSS variables (e.g., var(--e-global-color-primary), var(--e-global-typography-text-font-family)). This will ensure the widget integrates seamlessly with the user's global Elementor styles.

        Define custom CSS variables for widget-specific properties where no direct Elementor global variable exists (e.g., --dgcpf-filter-input-padding).

    Style New UI Elements:

        Add styling for the custom select2 fields.

        Ensure the new responsive gap settings translate visually.

        Style the carousel custom navigation arrows and (if implemented) thumbnail navigation.

    Refine Loading Animations:

        Performance Optimization for Initial Load (High Priority): Implement lazy-loading for filter options or an initial simplified query to improve the perceived loading speed for widgets with many options/results. Full filter counts and results could then load progressively.

        Enhance the visual appeal of the AJAX loading spinner and overlay.

        Implement styles for the micro-interactions on filter buttons during AJAX calls.

    Equal Heights Styling:

        Add CSS to support the equal_height_columns setting for grid and carousel layouts.

    Accessibility for Filter Counts:

        When displaying dynamic filter counts, ensure they are announced to screen readers (e.g., using aria-live regions or updating aria-label attributes on the filter options) so users relying on assistive technologies are aware of the changing counts.

    Keyboard Navigation for Filters:

        Implement robust keyboard navigation for all filter types (dropdowns, checkboxes, radio buttons, text inputs) to ensure they are fully operable without a mouse. This includes Tab key navigation, Space/Enter for selection, and arrow keys for dropdown/radio/checkbox groups.

Phase 5: ACF Plugin Presence Checks

    Plugin Activation/Load Check:

        Update domgats-customizable-product-filters.php: Add a function hooked to admin_init or plugins_loaded that checks for the active status of ACF (using function_exists('acf_get_field_groups') or is_plugin_active). If ACF is not active and the plugin intends to use ACF features, display an admin notice.

    Elementor Editor Control State:

        Update class-filtered-loop-widget.php's _get_all_acf_field_keys(): Ensure it returns an appropriate message or limited options if ACF is not active.

        Implement Control Conditions: Use Elementor's conditions property on ACF-related controls in register_controls() to automatically hide/disable them in the editor if ACF is not detected (e.g., using a JavaScript condition in the editor, or by passing an is_acf_active flag from PHP to JS).

Phase 6: Lower Priority / Future Enhancements

    Filter Persistence Across Sessions:

        Implement an option to store selected filter values in localStorage or sessionStorage so they persist when the user revisits the page or session.

    Filter Reset Confirmation (Optional):

        Add an optional confirmation dialog (using a custom modal UI, not alert()) for the "Clear All Filters" button if there are many active filters. This prevents accidental resets.

    Graceful Rendering after ACF Removal:

        Add checks in the render() method of class-filtered-loop-widget.php to handle scenarios where ACF fields were selected in the widget settings but the ACF plugin is no longer active. Provide a fallback display or a clear message instead of a fatal error.

Files Provided List

I. Plugin/Widget Files (Being Worked On):

    domgats-customizable-product-filters.php

    assets/css/filtered-loop-widget.css (will be the primary CSS)

    assets/js/filtered-loop-widget.js (will be the primary JS handler)

    includes/DGCPF_Admin.php

    includes/DGCPF_Ajax.php

    includes/elementor/class-dgcpf-elementor-widgets.php

    includes/elementor/widgets/dgcpf-filtered-loop-widget/class-filtered-loop-widget.php

II. Legacy Files (To Be Removed/Consolidated):

    assets/js/main.js

    assets/css/main.css

    templates/filter-ui.php

    includes/DGCPF_Shortcodes.php

III. Informational Elementor Files (Provided for Reference/Guidance):

    base.php

    loop-carousel.php

    loop-carousel.5108cb72ebb124297adb.bundle.js

    loop-carousel.f8067ec0c24b628c786e.bundle.min.js

    loop-filter-editor.46a4c013b80a381a50c9.bundle.js

    loop-filter-editor.67dfa5d044d7bd86bd6f.bundle.min.js

    loop.da94e53412e56933f721.bundle.js

    loop-grid.php

    module.php (from elementor-pro/modules/loop-builder/module.php)

    cta-template.php

    skin-loop-base.php

    skin-loop-post.php

    skin-loop-post-taxonomy.php

    skin-loop-taxonomy-base.php

    taxonomy-loop-provider.php

    loop.php (from ElementorPro\Modules\LoopBuilder\Files\Css\loop.php)

    loop-css-trait.php

    loop-dynamic-css.php (from ElementorPro\Modules\LoopBuilder\Files\Css\loop-dynamic-css.php)

    loop-preview.php (from ElementorPro\Modules\LoopBuilder\Files\Css\loop-preview.php)

    loop.php (from ElementorPro\Modules\LoopBuilder\Documents\loop.php)

    module.php (from ElementorPro\Modules\LoopFilter\module.php)

    taxonomy-filter.php (from ElementorPro\Modules\LoopFilter\Widgets\taxonomy-filter.php)

    hierarchical-taxonomy-trait.php (from ElementorPro\Modules\LoopFilter\Traits\hierarchical-taxonomy-trait.php)

    taxonomy-filter-trait.php (from ElementorPro\Modules\LoopFilter\Traits\taxonomy-filter-trait.php)

    taxonomy-manager.php (from ElementorPro\Modules\LoopFilter\Query\taxonomy-manager.php)

    taxonomy-query-builder.php (from ElementorPro\Modules\LoopFilter\Query\taxonomy-query-builder.php)

    file-tree-elementor-files-loop-builder.txt

    file-tree-elementor-loop-filter.txt

Directory Tree of Informational Elementor Files (as provided):

elementor-pro/
├── modules/
│   ├── loop-builder/
│   │   ├── assets/
│   │   │   └── images/
│   │   │       └── loop-item.svg
│   │   ├── documents/
│   │   │   └── loop.php
│   │   ├── files/
│   │   │   └── css/
│   │   │       ├── loop-css-trait.php
│   │   │       ├── loop-dynamic-css.php
│   │   │       ├── loop-preview.php
│   │   │       └── loop.php
│   │   ├── providers/
│   │   │   └── taxonomy-loop-provider.php
│   │   ├── skins/
│   │   │   ├── skin-loop-base.php
│   │   │   ├── skin-loop-post-taxonomy.php
│   │   │   ├── skin-loop-post.php
│   │   │   └── skin-loop-taxonomy-base.php
│   │   ├── traits/
│   │   │   └── alternate-templates-trait.php
│   │   ├── views/
│   │   │   └── cta-template.php
│   │   ├── widgets/
│   │   │   ├── base.php
│   │   │   ├── loop-carousel.php
│   │   │   └── loop-grid.php
│   │   └── module.php
│   └── loop-filter/
│       ├── Query/
│       │   ├── Data/
│       │   │   └── Query_Constants.php (implied by usage in taxonomy-query-builder.php)
│       │   ├── Interfaces/
│       │   │   └── Query_Interface.php (implied by usage in taxonomy-query-builder.php)
│       │   ├── QueryTypes/
│       │   │   ├── Hierarchy_And_Query.php (implied by usage in taxonomy-query-builder.php)
│       │   │   ├── Hierarchy_Or_Query.php (impliied by usage in taxonomy-query-builder.php)
│       │   │   └── Single_Terms_Query.php (implied by usage in taxonomy-query-builder.php)
│       │   ├── taxonomy-manager.php
│       │   └── taxonomy-query-builder.php
│       ├── Traits/
│       │   ├── hierarchical-taxonomy-trait.php
│       │   └── taxonomy-filter-trait.php
│       ├── Widgets/
│       │   └── taxonomy-filter.php
│       └── module.php
├── assets/
│   └── dev/
│       └── js/
│           ├── editor/
│           │   └── taxonomy-filter.js (from loop-filter-editor.46a4c013b80a381a50c9.bundle.js)
│           └── frontend/
│               ├── handlers/
│               │   ├── loop-carousel.js (from loop-carousel.5108cb72ebb124297adb.bundle.js)
│               │   └── loop.js (from loop.da94e53412e56933f721.bundle.js)
│               └── utils/
│                   └── run-element-handlers.js (implied by loop-carousel.js)
├── preview/
│   └── utils/
│       └── document-handle.js (from loop.da94e53412e56933f721.bundle.js)
└── (other Elementor Pro files and directories)

